import type { InferrableAny } from './common';
import * as Fn from './function';
export type Falsy = (false | null | undefined | 0 | -0 | 0n | '');
export type Truthy<X = InferrableAny> = Exclude<X, Falsy>;
export type T<X> = (Truthy<X> | Falsy);
export declare function isTruthy<X>(condition: T<X>): condition is Truthy<X>;
export declare function isFalsy<X>(condition: T<X>): condition is Falsy;
export declare function of<X>(condition: X): T<X>;
export declare function map<X, R>(condition: T<X>, fn: Fn.T<Truthy<R>, X>): T<R>;
