export type T<Y, X = any> = (Y | ((domain: X) => Y));
export type Domain<TFn> = TFn extends ((x: infer X) => any) ? X : void;
export type Range<TFn> = TFn extends T<infer R> ? R : never;
/**
 * Returns result of function, or value as-is.
 *
 * @param fn A function value
 * @param arg A argument to pass to function.
 *            It will be dropped if the given `fn` is not a callable.
 */
export declare function range<R, X = any>(fn: T<R, X>, ...arg: [X?] | []): R;
export type MergeRange<TFunction> = TFunction extends Record<string, T<unknown>> ? Range<TFunction[keyof TFunction]> : TFunction extends Array<T<unknown>> ? Range<TFunction[number]> : never;
